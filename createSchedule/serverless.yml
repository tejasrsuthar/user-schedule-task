service: createSchedule
frameworkVersion: "3"

## known issue to get outer serverless.yml custom variables
## @see: https://forum.serverless.com/t/unable-to-get-variables-when-files-are-in-different-folders/16390
## need to take it form local folder .env

custom:
  region: ${env:REGION}
  accountId: ${env:AWS_ACCOUNT_ID}
  bucketArn: "arn:aws:s3:::user-schedule-task-${self:custom.accountId}/*"
  lambdaArn: arn:aws:lambda:${self:custom.region}:${self:custom.accountId}:function/${sls:stage}-createSchedule

provider:
  name: aws
  runtime: nodejs18.x
  profile: aws_tejas
  vpc:
    securityGroupIds:
      - Fn::ImportValue: SecurityGroupId
    subnetIds:
      - Fn::ImportValue: SubnetId
  environment:
    SCHEDULE_BUCKET_NAME:
      Fn::ImportValue: Bucket
    DB_HOST:
      Fn::ImportValue: DBHost
    DB_PORT:
      Fn::ImportValue: RdsDBPort
    DB_USER:
      Fn::ImportValue: RdsMasterUserName
    DB_PASSWORD:
      Fn::ImportValue: RdsMasterPassword
    DB_NAME:
      Fn::ImportValue: RdsDbName

  # IAM Role statements will be attached to the lambda execution role
  iam:
    role:
      statements:
        # Allow lambda to write to log stream, put object to S3
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - ${self:custom.lambdaArn}

        # Allow RDS access
        - Effect: Allow
          Action:
            - rds:DescribeDBInstances
            - rds:Connect
          Resource: "*" ## WARNING: Just for the demo purpose, do not use this in PROD.

        # Allow lambda to upload mutation logs
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - ${self:custom.bucketArn}

layers:
  clayer:
    path: ../clayer
    compatibleRuntimes:
      - nodejs18.x
    description: The main lambda layer that will have all the required dependencies
functions:
  createSchedule:
    handler: ./build/index.handler
    events:
      - http:
          path: schedule
          method: post
      - http:
          path: schedule/{userId}
          method: get
      - http:
          path: schedule/{userId}/check
          method: get
          request:
            parameters:
              paths:
                userId: true
    name: ${sls:stage}-createSchedule
    description: Accepts user schedule from request and store it in DB after validation
    layers:
      - !Ref ClayerLambdaLayer
    environment:
      REGION: ${self:custom.region}
      SCHEDULE_BUCKET_NAME: ${self:provider.environment.SCHEDULE_BUCKET_NAME}
      DB_HOST: ${self:provider.environment.DB_HOST}
      DB_PORT: ${self:provider.environment.DB_PORT}
      DB_USER: ${self:provider.environment.DB_USER}
      DB_PASSWORD: ${self:provider.environment.DB_PASSWORD}
      DB_NAME: ${self:provider.environment.DB_NAME}
